################################################################################
#                                                                              #
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     Data Science with Python - v.0.9        #
# ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà                ‚ñà‚ñà   ‚ñà‚ñà    ¬© F√©lix D√©age - 2023                    #
# ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     License CC BY-SA 4.0 FR                 #
# ‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà                                                 #
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà         inspired by learnxinyminutes.com        #
#                                                                              #
################################################################################
#               #                                                              #
#  Chap. 8      #  Manipuler des strings                                       #
#               #                                                              #
################################################################################
#
#  - Chercher et remplacer dans une cha√Æne
#  - D'autres m√©thodes sur les strings
#  - Interpoler une cha√Æne
#  - Conversions de caract√®res : chr() et ord()
#  - Cha√Ænes longues
#
####################################################

# Chercher et remplacer dans une cha√Æne
########################################

"""
    1. "in" et "not in" permettent de tester si une sous-cha√Æne figure dans une
       cha√Æne
"""
"ab" in "abcd"     # => True
"ab" in "def"      # => False
"ab" not in "def"  # => True


"""
    2. La m√©thode .find() renvoie le rang auquel la sous-cha√Æne a √©t√© trouv√©e
       (et -1 si la sous-cha√Æne ne figure pas dans la cha√Æne)
"""
s = "abcdefgh"
s.find("cd")  # => 2
s.find("gh")  # => 6
s.find("hi")  # => -1


"""
    3. .replace() permet de remplacer un caract√®re par un autre‚Ä¶
"""
"J'aime les pommes".replace("e", "z")  # => "J'aimz lzs pommzs"
#       ‚Ä¶ou de le supprimer compl√®tement (on passe une cha√Æne vide)
"J'aime les pommes".replace("e", "")  # => "J'aim ls pomms"

# D'autres m√©thodes sur les strings
####################################

#   1. La m√©thode .split(<separateur>) s√©pare une chaiÃÇne en une liste de
#      sous-chaiÃÇnes (par d√©faut, le s√©parateur est l‚Äôespace)
"Il reste du fromage ?".split()  # => ['Il', 'reste', 'du', 'fromage', '?']
"12.5;17.5;18".split(";")  # => ['12.5', '17.5', '18']


"""
    2. La m√©thode .join() permet de convertir une liste de strings en une
       seule string
"""
lettres = ["p", "o", "u", "e", "t"]
"".join(lettres)  # => 'pouet'
"--".join(lettres)  # => 'p--o--u--e--t'
" ".join(["Salut","c'est","cool"])  # => "Salut c'est cool"

# TODO: d√©tail

"""
Note : vous trouveriez plus logique d'√©crire
lettres.join("--")    au lieu de     "--".join(lettres)  ? Moi aussi :)
"""


#   3. Les m√©thodes .upper() et .lower() changent la capitalisation d'une string
s2 = "aBcdEFgh"
s2.upper()  # => "ABCDEFGH"
s2.lower()  # => "abcdefgh"


"""
    4. La m√©thode .capitalize() va capitaliser la premi√®re lettre seulement, et
       mettre les autres lettres en minuscule
"""
s2.capitalize()  # => 'Abcdefgh'


"""
    5. Les m√©thodes .lstrip(), .rstrip() et .strip() enl√®vent les espaces √†
       droite et √† gauche d'une cha√Æne (lstrip : left, rstrip : right, strip :
       les deux)
"""
"    des espaces  ".rstrip()    # => '    des espaces'
"    des espaces  ".lstrip()    # => 'des espaces  '
"    des espaces     ".strip()  # => 'des espaces'


"""
    6. Les m√©thodes .rjust(n) et .ljust(n) permettent de donner √† une string
       une largeur fixe, ce qui est tr√®s pratique pour un affichage en
       colonnes de largeur fixe
"""
"abc".rjust(8)  # => '     abc'
"abc".ljust(8)  # => 'abc     '

# TODO

# Interpoler une cha√Æne
########################

"""
L'interpolation sert √† ins√©rer des variables dans des cha√Ænes de caract√®re.
C'est tr√®s utile car un texte affich√© par un programme doit souvent varier en
fonction d'une saisie utilisateur, d'une variable du programme, etc.
"""

# Quand on veut afficher du texte et une variable, on a vu qu'on pouvait
# concat√©ner des strings avec l'op√©rateur "+"
nom = "Michelle"
print("Je m'appelle " + nom) # => "Je m'appelle Michelle"

"""
Mais d√®s qu'on veut faire plus compliqu√© (prendre deux variables, ou utiliser
la variable au milieu d'un texte, par exemple), la concat√©nation est peu
pratique.

Exemple : on souhaite afficher un texte contenant un nom et un √¢ge contenus
dans une variable. Avec la concat√©nation, cela donne:
"""
age = 15
nom = "Michelle"
print("Je m'appelle " + nom + " et j'ai " + str(age) + " ans.")
# => Je m'appelle Michelle et j'ai 15 ans.

"""
‚Ä¶mais c'est complexe : il faut bien penser aux espaces entre les mots, √†
convertir les nombres en strings, etc.

L'interpolation r√®gle la plupart de ces difficult√©s.
"""

"""
Il y a deux m√©thodes pour interpoler une cha√Æne de caract√®res :
    1. La m√©thode "historique" consiste √† utiliser la m√©thode .format() sur une
       string en lui passant les param√®tres souhait√©s
"""
"{} peuvent √™tre {}".format("Les cha√Ænes", "interpol√©es")  # => "Les cha√Ænes
#                                                      peuvent √™tre interpol√©es"

# Note : .format() convertit automatiquement depuis des entiers ou des floats,
# donc on n'aura pas besoin d'utiliser str() !
"Une string et {}".format(5)  # => "Une string et 5"

# M√™me si cel√† ne se fait plus trop, on peut aussi r√©f√©rencer les variables par
# leur index
"Je m'appelle {1} et j'ai {0} ans.".format(age, nom)  # => "Je m'appelle
#                                                     Michelle et j'ai 15 ans."

"""
    2. Depuis Python 3.6, on peut aussi utiliser les "f-strings" pour
       interpoler une cha√Æne avec des variables. La syntaxe en devient beaucoup
       plus lisible, et c'est la m√©thode la plus utilis√©e aujourd'hui
"""
f"Salut {nom} !" # => Salut Michelle !  (Notez le "f" en d√©but de cha√Æne)
f"Je m'appelle {nom} et j'ai {age} ans."  # => "Je m'appelle Michelle et j'ai
#                                              15 ans."


# TODO: concat√©nation vs interpolation

# Conversions de caract√®res : chr() et ord()
#############################################

# On peut convertir chaque caract√®re en son indice Unicode, et inversement :

#   1. chr() renvoie le caracteÃÄre associ√© √† un indice Unicode
chr(65)     # => "A"
chr(97)     # => "a"
chr(233)    # => '√©'
chr(128561) # => "üò±"

#   2. Inversement, ord() renvoie un indice Unicode associ√© √† un caracteÃÄre
ord("A")    # => 65
ord("a")    # => 97
ord("√†")    # => 224
ord("üò±")   # => 128561

# D'o√π il s'ensuit que :
chr(ord("A"))  # => 'A'
ord(chr(65))   # => 65

"""
On remarque que les codes ASCII des majuscules/minuscules sont d√©cal√©s de 32.

On rappelle que les caract√®res ASCII sont aussi des caract√®res Unicode, et
vont jusqu'√† 127 seulement.
"""

# Cha√Ænes longues
########################

# La syntaxe utilis√©e pour les commentaires longs peut aussi servir pour les
# cha√Ænes de plusieurs lignes !
s = """Ceci est
une cha√Æne
vraiment tr√®s longue"""
print(s)
"""
Imprimera :

Ceci est
une cha√Æne
vraiment tr√®s longue
"""

# Note : les cha√Ænes longues sont tr√®s utilis√©es pour documenter du code.

# Si on ne souhaite pas avoir de sauts de ligne, on pourra utiliser des "\" en
# fin de chaque ligne
query = "SELECT action.descr as \"action\", " \
"role.id as role_id," \
"role.descr as role" \
"FROM " \
"public.role," \
"public.record_def, " \
"public.action" \
"WHERE role.id = role_action_def.role_id AND" \
"record_def.id = role_action_def.def_id;"

# L'impression se fera sur une seule ligne
print(query)
# SELECT action.descr as "action", role.id as role_id,role.descr as roleFROM public.role,public.record_def, public.actionWHERE role.id = role_action_def.role_id ANDrecord_def.id = role_action_def.def_id;
