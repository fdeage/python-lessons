################################################################################
#                                                                              #
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     Data Science with Python - v.0.9        #
# ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà                ‚ñà‚ñà   ‚ñà‚ñà    ¬© F√©lix D√©age - 2023                    #
# ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     License CC BY-SA 4.0 FR                 #
# ‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà                                                 #
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà         inspired by learnxinyminutes.com        #
#                                                                              #
################################################################################
#               #                                                              #
#  Chap. 25     #  Erreurs et exceptions                                       #
#               #                                                              #
################################################################################
#
#  - Le m√©canisme des erreurs en Python
#  - Sources d'erreurs fr√©quentes
#  - G√©rer les erreurs avec try: ‚Ä¶ except: ‚Ä¶
#  - Quand laisser crasher ?
#
##################################################



# TODO: flow, catching, hi√©rarchie, raise, handling multiple, syntax vs runtime, etc.


"""
Note : ce fichier n'est pas ex√©cutable, car le code ci-dessous va cr√©er EXPR√àS
des erreurs √† l'ex√©cution, dont certaines ne sont pas "interceptables" avec
"try‚Ä¶ except".
"""

# Le m√©canisme des erreurs en Python
#####################################

"""
Une erreur est un √©v√©nement g√©n√©r√© par Python qui va interrompre l'ex√©cution
normale du programme.

En l'absence d'une gestion d'erreur d√©di√©e, le programme va "crasher", c√†d
quitter apr√®s avoir affich√© un message d'erreur.

Il y a deux sources possibles √† une erreur :
    1. Python a rencontr√© une situation impr√©vue dans laquelle il ne sait pas
       comment continuer une ex√©cution normale (c'est souvent le signe qu'une
       situation n'a pas √©t√© pr√©vue par le programmeur).

Exemple : quand survient une division par 0 :
"""
for i in range(6):
    print(1 / (5 - i))
# Attention : ce code va cr√©er une erreur ZeroDivisionError quand i vaudra 5

"""
    2. il est aussi possible de cr√©er ("soulever") soi-m√™me une erreur avec le
       mot-cl√©"raise" :
"""
raise ZeroDivisionError     # => soul√®ve la m√™me erreur manuellement


# Les deux lignes de code plus haut ont exactement la m√™me cons√©quence : cr√©er une erreur qui va interrompre le fil normal du programme.

# On peut m√™me rajouter un message d'erreur pour l'utilisateur
raise IndexError("Ne d√©passe pas l'indice de la liste plz üò°")

"""
IMPT : il y a deux issues possibles √† la survenue d'une erreur :
    1. soit l'erreur est intercept√©e (avec try: ‚Ä¶ except: ‚Ä¶)
    2. soit l'erreur n'est pas intercept√©e et crashe le programme.

Attention : il n'y a pas de "meilleure" solution pour g√©rer l'erreur ! en
fonction de la situation, il peut √™tre souhaitable de laisser crasher
(philosophie du "let it crash").
"""


# Causes fr√©quentes d'erreurs
##############################

"""
Certaines sont tr√®s classiques (SyntaxError, d√©passer les limites d'une liste,
appeler une m√©thode de liste sur une string, etc.). D'autres sont beaucoup plus
rares.
"""

#   1. D√©passer les limites d'une liste
depassement = [1, 2, 3]
depassement[42]  # => IndexError: list index out of range

#   2. Utiliser une m√©thode qui n'existe pas pour un objet
"abc".bizarre()  # => AttributeError: 'str' object has no attribute 'bizarre'

#   3. Utiliser une variable du mauvais type (ici un int au lieu d'une string)
"Hello " + 42    # => TypeError: can only concatenate str (not "int") to str

#   4. Faire une conversion impossible entre deux types
int("abc")       # => ValueError: invalid literal for int() with base 10: 'abc'

#   5. Utiliser une variable non-d√©finie
a += 1           # => NameError: name 'a' is not defined

#   6. Utiliser un mot-cl√© non-d√©fini
iff True:      # => SyntaxError: invalid syntax (iff)
    print("Ceci n'est pas un if")

#   7. Utiliser une valeur qui n'est pas dans une liste
l2 = [1]
l2.remove(2)   # ValueError: list.remove(x): x not in list

#   8. R√©f√©rencer une valeur qui n'est pas dans un dictionnaire
d = {0: "z√©ro", 1: "un"}
d[2]           # => KeyError: 2

#   9. Se tromper d'indentation en d√©but de ligne
  a = 1         # => IndentationError: unexpected indent

# TODO: ImportError, FileNotFoundError, ArithmeticError, AssertionError

"""
Il y a grosso modo deux types d'erreurs : les SyntaxError et les RuntimeError. On ne peut pas catcher les premi√®res !
1 = x
[1)
   identation, etc.

   TODO: hierarchie d'erreurs



Il y a des dizaines d'autres erreurs et il ne sert √† rien de toutes les
conna√Ætre. Mais il faut BIEN LIRE LES MESSAGES D'ERREURS : ils vous sauveront
souvent‚Ä¶
"""

# G√©rer les erreurs avec try: ‚Ä¶ except: ‚Ä¶
##############################################

"""
Pour intercepter une erreur, on utilisera les mots-cl√©s "try" et "except",
que l'on mettra "autour" du code qui peut cr√©er une erreur
"""
try:
    for i in range(6):
        print(1 / (5 - i))
except ZeroDivisionError:
    # Ici on met le code qui doit "sauver" l'ex√©cution du programme
    print(f"Division par 0 avec {i}")
else:   # clause optionnelle, ex√©cut√©e s'il n'y a PAS d'erreur
    print(f"Pas de division par 0 avec {5 - i}, cool !")

"""
Notez qu'on ne "catche" QUE les ZeroDivisionError : si on en rencontre d'autres,
elles feront planter le programme !

On peut dire √† except d'intercepter plusieurs types d'erreurs :
"""

# TODO
try:
    for i in range(6):
        print(1 / (5 - i))
except ZeroDivisionError:
    print(f"Division par 0 avec {i}")
except AssertionError:
    print("Une assertion a plant√©")
except:
    print("Toutes les autres erreurs")
else:
    # clause optionnelle, ex√©cut√©e s'il n'y a PAS d'erreur



try:
    une_fonction_qui_peut_creer_des_erreurs()
except (TypeError, NameError):
    print("TypeError et NameError ne nous g√™nent pas ici, on passe")

# Exemple de gestion d'erreurs d'une saisie utilisateur
while True:
    age = input('Quel est votre √¢ge ? ')
    try:
        # int() peut cr√©er une erreur si on lui passe une cha√Æne absurde
        age = int(age)
    except ValueError:
        print('Vous devez utiliser des chiffres.')
    else:
        break # Ceci permet de sortir de la boucle while

"""
Pour catcher TOUTES les erreurs possibles, on peut utiliser cette syntaxe :
"""
try:
    fonction_qui_peut_planter()
# except TypeError as err:
except _ as err:
# except:   #  TOUT catcher
    print("Erreur ! Erreur ! Erreur !")
    pass


# Live and let die : quand laisser crasher ?
#############################################

"""
Que l'erreur ait √©t√© soulev√©e par le programme ou par "raise", cette erreur
va, par d√©faut, interrompre le programme. Si l'on souhaite emp√™cher cette
interruption, il faut demander √† Python "d'intercepter" l'erreur.

Savoir quelle erreur intercepter et laquelle faire crasher le programme
n'est pas √©vident‚Ä¶ ce sera √† vous de d√©cider √† chaque fois !

Certains programmes critiques ne doivent JAMAIS √™tre interrompus
(pacemakers, centrales nucl√©aires, ordinateur de bord d'avion, r√©seaux
√©lectriques‚Ä¶).

Pour beaucoup d'autres (serveurs web, ordinateurs personnels, jeux‚Ä¶), il
est plus simple de laisser le programme crasher et le relancer ensuite.
"""

"""
Parfois la solution est de laisser crasher/√©teindre puis relancer. C'est la
raison pour laquelle la premi√®re question qu'un sp√©cialiste r√©pond quand on a
un probl√®me d'informatique est :

"Avez-vous essay√© d'√©teindre et de rallumer votre ordinateur ?"
"""
